/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(/*! ./style.scss */ \"./src/style.scss\");\nwindow.addEventListener('load', function (e) {\n    var _a;\n    var audio = document.getElementById('audio');\n    var sampleList = document.getElementById('sample');\n    var qualityList = document.getElementById('quality');\n    var styleSelect = document.getElementById('style');\n    var backgroundCheck = document.getElementById('background');\n    var initButton = document.getElementById('initialise');\n    var splashScreen = document.querySelector('.splash-screen');\n    var topInterface = document.querySelector('.top-interface');\n    var bottomInterface = document.querySelector('.bottom-interface');\n    var mainContent = document.querySelector('.main-content');\n    var canvas = document.getElementById('canvas');\n    var context = canvas.getContext('2d');\n    var auxillaryCanvas = document.getElementById('auxillary-canvas');\n    var auxillaryContext = auxillaryCanvas.getContext('2d');\n    var backgroundCanvas = document.getElementById('background-canvas');\n    var backgroundContext = backgroundCanvas.getContext('2d', { alpha: false });\n    /* Functions to help manage the canvases */\n    var canvasControls = {\n        canvasHeight: 0,\n        canvasWidth: 0,\n        percentageConstrain: 60,\n        constraints: 0,\n        hasBackground: true,\n        initialiseSizes: function () {\n            this.canvasHeight = window.innerHeight;\n            this.canvasWidth = window.innerWidth;\n            this.constraints = this.canvasHeight - ((this.canvasHeight / 100) * this.percentageConstrain);\n            visualiserRender.canvasHeight = this.canvasHeight;\n            visualiserRender.canvasWidth = this.canvasWidth;\n        },\n        setCanvasDimensions: function (canvas) {\n            canvas.height = this.canvasHeight;\n            canvas.width = this.canvasWidth;\n        },\n        updateHasBackground: function (value) {\n            this.hasBackground = value;\n        },\n        clearCanvas: function (context) {\n            context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        },\n        drawBlackBackground: function (context) {\n            context.fillStyle = '#000';\n            context.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n        },\n        getFrequencyDataAsPercentage: function (frequencyData) {\n            var percentage = Math.round(frequencyData / 255 * 100);\n            return ((this.canvasHeight - this.constraints) / 100 * percentage);\n        }\n    };\n    /* Functions to help manage the audio */\n    var audioAnalysisControls = {\n        audioContext: AudioContext,\n        audioSource: MediaElementAudioSourceNode,\n        audioAnalyser: {},\n        sampleQuality: 1024,\n        bufferLength: 0,\n        dataArray: {},\n        initialiseAudio: function () {\n            this.audioContext = new AudioContext();\n            this.audioSource = this.audioContext.createMediaElementSource(audio);\n            this.audioAnalyser = this.audioContext.createAnalyser();\n            this.audioAnalyser.fftSize = this.sampleQuality;\n            this.audioAnalyser.maxDecibels = 0;\n            this.updateBufferLength();\n            this.updateDataArray();\n            visualiserRender.updateBarWidth();\n        },\n        updateBufferLength: function () {\n            this.bufferLength = this.audioAnalyser.frequencyBinCount;\n        },\n        updateDataArray: function () {\n            this.dataArray = new Uint8Array(this.bufferLength);\n        },\n        connectAudioInterfaces: function () {\n            this.audioSource.connect(this.audioAnalyser);\n            this.audioAnalyser.connect(this.audioContext.destination);\n        },\n        updateSampleQuality: function (value) {\n            this.sampleQuality = value;\n            this.audioAnalyser.fftSize = this.sampleQuality;\n            console.log('Quality is: ' + this.audioAnalyser.fftSize);\n            this.updateBufferLength();\n            this.updateDataArray();\n            visualiserRender.updateBarWidth();\n        },\n        updateByteFrequencyData: function () {\n            this.audioAnalyser.getByteFrequencyData(this.dataArray);\n        },\n        updateByteTimeDomainData: function () {\n            this.audioAnalyser.getByteTimeDomainData(this.dataArray);\n        }\n    };\n    var visualiserRender = {\n        mode: 'frequency',\n        barWidth: 0,\n        barGap: 5,\n        canvasHeight: 0,\n        canvasWidth: 0,\n        middleHeight: 0,\n        bottomPadding: 200,\n        initialiseRenderer: function () {\n            this.canvasHeight = canvasControls.canvasHeight;\n            this.canvasWidth = canvasControls.canvasWidth;\n            this.middleHeight = this.canvasHeight / 2;\n        },\n        updateBarWidth: function () {\n            this.barWidth = (canvasControls.canvasWidth / audioAnalysisControls.bufferLength) * 2.5;\n        },\n        updateBarGap: function (value) {\n            this.barGap = value;\n        },\n        getMode: function () {\n            return this.mode;\n        },\n        changeModeToFrequency: function () {\n            this.mode = 'frequency';\n        },\n        changeModeToTimeDomain: function () {\n            this.mode = 'time-domain';\n        },\n    };\n    var visualiserThemes = {\n        colors: (_a = {},\n            _a['red'] = '#db2146',\n            _a['green'] = '#34eda3',\n            _a['purple'] = '#cf51ad',\n            _a['blue'] = '#51B1CF',\n            _a['black'] = '#000',\n            _a['XPgreen'] = '#A5EF08',\n            _a),\n        selectedTheme: {},\n        offscreenCanvas: {},\n        offscreenContext: {},\n        createBackgroundContext: function () {\n            var offscreenCanvas = document.createElement('canvas');\n            offscreenCanvas.width = canvasControls.canvasWidth;\n            offscreenCanvas.height = canvasControls.canvasHeight;\n            var offscreenContext = offscreenCanvas.getContext('2d', { alpha: false });\n            offscreenContext.fillStyle = 'yellow';\n            offscreenContext.fillRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            this.offscreenCanvas = offscreenCanvas;\n            this.offscreenContext = offscreenContext;\n        },\n        drawOnBackgroundContext: function (fillStyle) {\n            this.offscreenContext.fillStyle = fillStyle;\n            this.offscreenContext.fillRect(0, 0, canvasControls.canvasWidth, canvasControls.canvasHeight);\n        },\n        updateSelectedTheme: function (theme) {\n            this.selectedTheme = theme;\n            this.selectedTheme.updateBackground();\n        },\n        returnThemesAsArray: function () {\n            return Object.keys(this.themes);\n        },\n        findThemeIndexByName: function (name) {\n            var array = this.returnThemesAsArray();\n            console.log('array:');\n            console.log(array);\n            for (var index = 0; index < array.length; index++) {\n                var theme = array[index];\n                console.log('theme is: ' + theme);\n                console.log(typeof theme);\n                if (theme == name) {\n                    console.log(index);\n                    return index;\n                }\n                else {\n                    return null;\n                }\n                /* return theme === name ? index : null */\n            }\n        },\n        themes: {\n            hyperBars: {\n                getColor: function (color) {\n                    return visualiserThemes.colors[color];\n                },\n                getOffscreenContext: function () {\n                    return visualiserThemes.offscreenContext;\n                },\n                backgroundGradient: function () {\n                    /* Initialise the gradient */\n                    var background = this.getOffscreenContext().createLinearGradient(0, 0, 0, canvasControls.canvasHeight);\n                    /* Add color stops */\n                    background.addColorStop(0, this.getColor('red'));\n                    background.addColorStop(0.5, this.getColor('green'));\n                    background.addColorStop(1, this.getColor('red'));\n                    return background;\n                },\n                topGradient: function (middleHeight, topGradientStart) {\n                    /* Initialise the gradient */\n                    var topGradient = context.createLinearGradient(0, topGradientStart, 0, middleHeight);\n                    /* Add color stops */\n                    topGradient.addColorStop(0, this.getColor('red'));\n                    topGradient.addColorStop(0.8, this.getColor('purple'));\n                    topGradient.addColorStop(1, this.getColor('green'));\n                    return topGradient;\n                },\n                bottomGradient: function (middleHeight, barHeight) {\n                    /* Initialise the gradient */\n                    var bottomGradient = context.createLinearGradient(0, middleHeight, 0, middleHeight + barHeight);\n                    /* Add color stops */\n                    bottomGradient.addColorStop(0, this.getColor('green'));\n                    bottomGradient.addColorStop(0.2, this.getColor('purple'));\n                    bottomGradient.addColorStop(1, this.getColor('red'));\n                    return bottomGradient;\n                },\n                drawTopBars: function (middleHeight, barHeight, barWidth, xPosition) {\n                    var topGradientStart = middleHeight - barHeight;\n                    context.fillStyle = this.topGradient(middleHeight, topGradientStart);\n                    context.fillRect(xPosition, topGradientStart, barWidth, barHeight);\n                },\n                drawBottomBars: function (middleHeight, barHeight, barWidth, xPosition) {\n                    auxillaryContext.fillStyle = this.bottomGradient(middleHeight, barHeight);\n                    auxillaryContext.fillRect(xPosition, middleHeight, barWidth, barHeight);\n                },\n                // Call this command to draw the bars for this theme\n                draw: function (middleHeight, barHeight, xPosition) {\n                    var barWidth = visualiserRender.barWidth;\n                    barHeight = barHeight / 2;\n                    this.drawTopBars(middleHeight, barHeight, barWidth, xPosition);\n                    this.drawBottomBars(middleHeight, barHeight, barWidth, xPosition);\n                },\n                // Initialise the background\n                updateBackground: function () {\n                    visualiserRender.barGap = 5;\n                    visualiserThemes.drawOnBackgroundContext(this.backgroundGradient());\n                },\n            },\n            redOnRedBars: {\n                getColor: function (color) {\n                    return visualiserThemes.colors[color];\n                },\n                getOffscreenContext: function () {\n                    return visualiserThemes.offscreenContext;\n                },\n                backgroundGradient: function () {\n                    var background = this.getOffscreenContext().createLinearGradient(0, 0, 0, canvasControls.canvasHeight);\n                    background.addColorStop(0, this.getColor('red'));\n                    background.addColorStop(1, this.getColor('black'));\n                    return background;\n                },\n                drawBars: function (middleHeight, barHeight, barWidth, xPosition) {\n                    context.fillStyle = this.getColor('red');\n                    context.fillRect(xPosition, canvasControls.canvasHeight - barHeight, barWidth, barHeight);\n                },\n                // Call this command to draw the bars for this theme\n                draw: function (middleHeight, barHeight, xPosition) {\n                    var barWidth = visualiserRender.barWidth;\n                    this.drawBars(middleHeight, barHeight, barWidth, xPosition);\n                },\n                // Initialise the background\n                updateBackground: function () {\n                    visualiserRender.barGap = 5;\n                    visualiserThemes.drawOnBackgroundContext(this.backgroundGradient());\n                },\n            },\n            whiteOnBlackBars: {\n                getColor: function (color) {\n                    return visualiserThemes.colors[color];\n                },\n                getOffscreenContext: function () {\n                    return visualiserThemes.offscreenContext;\n                },\n                backgroundGradient: function () {\n                    return this.getColor('black');\n                },\n                drawBars: function (middleHeight, barHeight, barWidth, xPosition) {\n                    context.fillStyle = 'white';\n                    context.fillRect(xPosition, (canvasControls.canvasHeight - barWidth / 2) - barHeight, barWidth, barWidth / 2);\n                },\n                // Call this command to draw the bars for this theme\n                draw: function (middleHeight, barHeight, xPosition) {\n                    var barWidth = visualiserRender.barWidth;\n                    this.drawBars(middleHeight, barHeight, barWidth, xPosition);\n                },\n                // Initialise the background\n                updateBackground: function () {\n                    visualiserRender.barGap = -1;\n                    visualiserThemes.drawOnBackgroundContext(this.backgroundGradient());\n                },\n            },\n            windowsXPBars: {\n                getColor: function (color) {\n                    return visualiserThemes.colors[color];\n                },\n                getOffscreenContext: function () {\n                    return visualiserThemes.offscreenContext;\n                },\n                background: function () {\n                    return this.getColor('black');\n                },\n                drawBars: function (barHeight, barWidth, xPosition) {\n                    context.fillStyle = this.getColor('XPgreen');\n                    context.fillRect(xPosition, canvasControls.canvasHeight - barHeight, barWidth, barHeight);\n                },\n                // Call this command to draw the bars for this theme\n                draw: function (middleHeight, barHeight, xPosition) {\n                    var barWidth = visualiserRender.barWidth;\n                    this.drawBars(barHeight, barWidth, xPosition);\n                },\n                // Initialise the background\n                updateBackground: function () {\n                    visualiserRender.barGap = 1;\n                    visualiserThemes.drawOnBackgroundContext(this.background());\n                },\n            },\n            windowsXPLine: {\n                getColor: function (color) {\n                    return visualiserThemes.colors[color];\n                },\n                getOffscreenContext: function () {\n                    return visualiserThemes.offscreenContext;\n                },\n                background: function () {\n                    return this.getColor('black');\n                },\n                drawBars: function (barHeight, barWidth, xPosition) {\n                    context.fillStyle = this.getColor('XPgreen');\n                    context.fillRect(xPosition, canvasControls.canvasHeight - barHeight, barWidth, barHeight);\n                },\n                // Call this command to draw the bars for this theme\n                draw: function (middleHeight, barHeight, xPosition) {\n                    var barWidth = visualiserRender.barWidth;\n                    this.drawBars(barHeight, barWidth, xPosition);\n                },\n                // Initialise the background\n                updateBackground: function () {\n                    visualiserRender.barGap = 1;\n                    visualiserThemes.drawOnBackgroundContext(this.background());\n                },\n            },\n        }\n    };\n    var cookieControls = {\n        has_cookie: false,\n        cookie_name: 'visualiser-options',\n        cookie: {},\n        compareLimit: 5,\n        // There's probably a better way to do this\n        setCookie: function (name, value) {\n            var date = new Date();\n            // Three day expiration\n            date.setTime(date.getTime() + (3 * 24 * 60 * 60 * 1000));\n            var expires = \"; expires=\" + date.toUTCString();\n            document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n        },\n        getCookie: function (name) {\n            var cookieName = name + \"=\";\n            var cookieArray = document.cookie.split(';');\n            for (var index = 0; index < cookieArray.length; index++) {\n                var cookieString = cookieArray[index];\n                if (cookieString.includes(name)) {\n                    // Remove white space and get the string after the cookie name\n                    cookieString = cookieString.trim();\n                    cookieString = cookieString.slice(cookieName.length, cookieString.length);\n                    return JSON.parse(cookieString);\n                }\n            }\n        },\n        checkForCookie: function () {\n            var cookie = this.getCookie(this.cookie_name);\n            if (!(cookie === '')) {\n                this.has_cookie = true;\n            }\n        },\n        writeCookie: function () {\n            var cookieContent = [\n                Object.keys(visualiserThemes.themes)\n            ];\n            var cookieValue = JSON.stringify(cookieContent);\n            this.setCookie(this.cookie_name, cookieValue);\n            this.has_cookie = true;\n        },\n        readCookie: function () {\n            var cookie = this.getCookie(this.cookie_name);\n            if (cookie) {\n                this.cookie = cookie;\n                visualiserThemes.selectedTheme = this.cookie[0];\n            }\n        },\n    };\n    canvasControls.initialiseSizes();\n    canvasControls.setCanvasDimensions(backgroundCanvas);\n    canvasControls.setCanvasDimensions(auxillaryCanvas);\n    canvasControls.setCanvasDimensions(canvas);\n    visualiserRender.initialiseRenderer();\n    visualiserThemes.createBackgroundContext();\n    visualiserThemes.updateSelectedTheme(visualiserThemes.themes['hyperBars']);\n    visualiserThemes.selectedTheme.updateBackground();\n    backgroundContext.drawImage(visualiserThemes.offscreenCanvas, 0, 0);\n    sampleList.addEventListener('change', function (e) {\n        var value = sampleList.options[sampleList.selectedIndex].value;\n        if (value == 'trap') {\n            audio.src = 'music/two_face.mp3';\n            audio.play();\n        }\n        else if (value == 'reggae') {\n            audio.src = 'music/thug_dub.mp3';\n            audio.play();\n        }\n        else {\n            audio.src = 'music/blue_whale.mp3';\n            audio.play();\n        }\n    });\n    backgroundCheck.addEventListener('change', function (e) {\n        backgroundCheck.checked ? canvasControls.updateHasBackground(true) : canvasControls.updateHasBackground(false);\n    });\n    function initialiseVisualiser() {\n        audioAnalysisControls.initialiseAudio();\n        audioAnalysisControls.connectAudioInterfaces();\n        qualityList.addEventListener('change', function (e) {\n            var value = qualityList.options[qualityList.selectedIndex].value;\n            if (value == 'extreme') {\n                audioAnalysisControls.updateSampleQuality(4096);\n            }\n            else if (value == 'high') {\n                audioAnalysisControls.updateSampleQuality(2048);\n            }\n            else if (value == 'medium') {\n                audioAnalysisControls.updateSampleQuality(1024);\n            }\n            else if (value == 'low') {\n                audioAnalysisControls.updateSampleQuality(512);\n            }\n        });\n        // Dynamic bar height\n        var barHeight = 0;\n        // Position of a bar on the X axis\n        var x = 0;\n        styleSelect.addEventListener('change', function (e) {\n            var value = styleSelect.options[styleSelect.selectedIndex].value;\n            if (value == 'hyperBars') {\n                visualiserThemes.updateSelectedTheme(visualiserThemes.themes.hyperBars);\n            }\n            else if (value == 'redOnRedBars') {\n                visualiserThemes.updateSelectedTheme(visualiserThemes.themes.redOnRedBars);\n            }\n            else if (value == 'whiteOnBlackBars') {\n                visualiserThemes.updateSelectedTheme(visualiserThemes.themes.whiteOnBlackBars);\n            }\n            else if (value == 'windowsXPBars') {\n                visualiserThemes.updateSelectedTheme(visualiserThemes.themes.windowsXPBars);\n            }\n        });\n        function renderFrame() {\n            requestAnimationFrame(renderFrame);\n            canvasControls.clearCanvas(context);\n            canvasControls.clearCanvas(auxillaryContext);\n            // Reset x\n            x = 0;\n            audioAnalysisControls.updateByteFrequencyData();\n            if (canvasControls.hasBackground) {\n                backgroundContext.drawImage(visualiserThemes.offscreenCanvas, 0, 0);\n            }\n            else {\n                canvasControls.drawBlackBackground(backgroundContext);\n            }\n            for (var i = 0; i < audioAnalysisControls.bufferLength; i++) {\n                barHeight = audioAnalysisControls.dataArray[i];\n                barHeight = canvasControls.getFrequencyDataAsPercentage(audioAnalysisControls.dataArray[i]);\n                visualiserThemes.selectedTheme.draw(visualiserRender.middleHeight, barHeight, x);\n                x += visualiserRender.barWidth + visualiserRender.barGap;\n            }\n        }\n        renderFrame();\n        audio.addEventListener('ended', function (e) {\n            console.log('The audio has ended');\n        });\n        audio.addEventListener('pause', function (e) {\n            console.log('The audio has paused');\n        });\n    }\n    initButton.addEventListener('click', function (e) {\n        splashScreen.classList.add('fading');\n        mainContent.classList.remove('hidden');\n        setTimeout(function () {\n            splashScreen.classList.add('disabled');\n        }, 200);\n        initButton.disabled = true;\n        topInterface.classList.add('shown');\n        bottomInterface.classList.add('shown');\n        initialiseVisualiser();\n    });\n});\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ }),

/***/ "./src/style.scss":
/*!************************!*\
  !*** ./src/style.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/style.scss?");

/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/main.ts */\"./src/main.ts\");\n\n\n//# sourceURL=webpack:///multi_./src/main.ts?");

/***/ })

/******/ });